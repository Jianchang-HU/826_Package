install.packages("Rmpfr")
install.packages("gmp")
install.packages("knitr")
install.packages("RCurl")
install.packages("XML")
install.packages("RCurl")
install.packages("XML")
? F test
help(F test)
help(F-test)
stream1 = c(16, 12, 14, 11)
stream2 = c(9, 10, 8, 6, 5)
check.var = var.test(stream1, stream2, ratio=1)
check.var
?t.test
t.results = t.test(stream1, stream2, alternative="greater", var.equal=T)
spock = c(6.4, 8.7, 13.3, 13.6, 15, 15.2, 17.7, 18.6, 23.1)
a = c(16.8, 30.8, 33.6, 40.5, 48.9)
b = c(27, 28.9, 32, 32.7, 35.5, 45.6)
c = c(21, 23.4, 27.5, 27.5, 30.5, 31.9, 32.5, 33.8, 33.8)
d = c(24.3, 29.7)
e = c(17.7, 19.7, 21.5, 27.9, 34.8, 40.2)
f = c(16.5, 20.7, 23.5, 26.4, 26.7, 29.5, 29.8, 31.9, 36.2)
p.Values = NULL
for (i in c(a,b,c,d,e,f)){ p.val = t.test(spock, i, alternative = "less", var.equal = var.test(i, spock)$p.value>=0.05)$p.value); p.Values = c(p.Values, p.val) }
for (i in c(a,b,c,d,e,f) ){ p.val = t.test(spock, i, alternative = "less", var.equal = var.test(i, spock)$p.value>=0.05)$p.value; p.Values = c(p.Values, p.val) }
i = a
i = 'a'
var.test(i, spock)$p.value
others = list()
others[1] = c(16.8, 30.8, 33.6, 40.5, 48.9)
others[2] = c(27, 28.9, 32, 32.7, 35.5, 45.6)
others[3] = c(21, 23.4, 27.5, 27.5, 30.5, 31.9, 32.5, 33.8, 33.8)
others[4] = c(24.3, 29.7)
others[5] = c(17.7, 19.7, 21.5, 27.9, 34.8, 40.2)
others[6] = c(16.5, 20.7, 23.5, 26.4, 26.7, 29.5, 29.8, 31.9, 36.2)
others = list()
others[[1]] = c(16.8, 30.8, 33.6, 40.5, 48.9)
others = list()
others[[1]] = c(16.8, 30.8, 33.6, 40.5, 48.9)
others[[2]] = c(27, 28.9, 32, 32.7, 35.5, 45.6)
others[[3]] = c(21, 23.4, 27.5, 27.5, 30.5, 31.9, 32.5, 33.8, 33.8)
others[[4]] = c(24.3, 29.7)
others[[5]] = c(17.7, 19.7, 21.5, 27.9, 34.8, 40.2)
others[[6]] = c(16.5, 20.7, 23.5, 26.4, 26.7, 29.5, 29.8, 31.9, 36.2)
length(others)
p.Values = NULL
for (i in 1:length(others) ){ p.val = t.test(spock, others[[i]], alternative = "less", var.equal = var.test(others[[i]], spock)$p.value>=0.05)$p.value; p.Values = c(p.Values, p.val) }
max(p.Values)
p.Values * 6
p.Values * 6 <= 0.05
p.Values = NULL
for (i in 1:length(others) ){
p.val = t.test(spock, others[[i]], alternative = "less", var.equal = var.test(others[[i]], spock)$p.value>=0.01)$p.value
p.Values = c(p.Values, p.val)
}
p.Values*6<=0.05
y = NULL
times = NULL
for (i in 1:length(others)){
y = c(y, others[[i]])
times = c(times, length(others[[i]]))
}
x = rep(c(0:5), times)
anova.result = anova(lm(y~as.factor(x)))
anova.result
getwd()
test = rep(c(1,2,3), times = c(2,3,4))
?rep
test = rep(c(1,2,3), times = c(2,3))
test = rep(c(1,2,3), length.out = 5
)
test = rep(c(1,2,3), length.out = 12)
test = rep(c(1,2,3), length.out = 5.6)
rep(1:4,each=2,times=3)
rep(1:4,times=3,each=2)
rep(1, 40*(1-.8))
rep(1, 40*(1-.8)+1e-7)
40*(1-.8)
fred <- list(happy = 1:10, name = "squash")
rep(fred, 5)
x <- factor(LETTERS[1:4]); names(x) <- letters[1:4]
x
rep(x, 2)
rep(x, each = 2)
rep.int(x, 2)  # no names
rep_len(x, 10)
any(x>)
any(x>8)
any(as.numeric(x)>8)
as.numeric(x)>8
as.numeric(x)
runs = rep(0,3)
runs = runs[runs!=0]
runs
m = matrix(c(1,2,3,4,5,6), nrow=2)
m
col(m)==row(m)
f = function(x) x/c(2,8)
y = apply(y, 2, f)
y = apply(m, 2, f)
y
y = apply(t(m), 1, f)
y
?clusterApply
?snow
??snow
which.max(m)
apply(m, 1, which.max)
?one
rbind(y,1)
cbind(y,1)
which.min(y)
which(y==min(y), arr.ind = T)
ij = which(y==min(y), arr.ind = T)
ij
which(y==min(y))
z
m
m[1,3] = 1
m
which(m==min(m), arr.ind=T)
install.packages("pixmap")
library(pixmap)
fig1 = read.pnm("mtrush1.pgm")
fig1 = read.pnm("mtrush1.pgn")
ls(pixmap)
pixmap::pixmap
pixmap:pixmap
show(pixmap)
ls("package:pixmap")
cat("/014")
cat("\014")
length(m)
typeof(m)
class(m)
attributes(m)
show(dim)
m = matrix(seq(6), nrow=3)
m
f = function(x) return(cbind(x,rep(1,3)))
apply(m, 2, f)
cbind(m[,1], rep(1,3))
x = c(2.614712, 9.816267, 8.767552, 9.885403, 6.165992)
mean(x)
var(x)
var(x)*4*4
sst = var(x)*4*4
ssr = 33.55517
sst+ssr
sst/4
ssr/15
sst/4/ssr*15
pf(17.11884, df1=4, df2=15)
1-pf(17.11884, df1=4, df2=15)
c = c(1/2, 1/2, -1/3, -1/3, -1/3)
sum(c*x)
sum(c*x)^2
sum(c*x)^2*24/5/2.237011
pf(9.083428, df1=1, df2=15)
1-pf(9.083428, df1=1, df2=15)
5.22*sqrt(2.237011)/2
code <- gl(4, 10)
x = matrix(1:6, 2,3)
x
std = function(x){
x = x / sum(x^2)
return(x)
}
x = apply(x, 1, std)
x
x%*%t(x)
t(x)%*%x
?apply
x = matrix(1:6, 2,3)
apply(x, 2, FUN=std)
std = function(x){
x = x / sqrt(sum(x^2))
return(x)
}
apply(x, 2, FUN=std)
x0 = rnorm(1, mean=0, sd=1)
sigma=2
error = rnorm(n, mean=0, sd=sigma)
n=5
error = rnorm(n, mean=0, sd=sigma)
x = cumsum(c(x0, error))  # construct the one-dim BM
?plot
plot(x)
simBM = function(n, sigma){
# This function simulates one-dimensional Brownian motion with length n
x0 = rnorm(1, mean=0, sd=1)  # generate starting point from std normal
error = rnorm(n, mean=0, sd=sigma)  # generate error process
x = cumsum(c(x0, error))  # construct the one-dim BM
# plot the BM
plot(x, type="l", main = "One-Dimensional Brownian Motion")
return(x)
}
simBM(10, 2)
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
source('~/Documents/Wisconsin/BMI_826/SimBM.R')
source('~/Documents/Wisconsin/BMI_826/SimBM.R')
y = SimBM(5)
y
n=5
sigma=1
x0 = matrix( rnorm(2, mean=0, sd=1), 2, 1)  # generate starting point from std normal
error = matrix( rnorm(2*n, mean=0, sd=sigma), 2, n)  # generate error process
x = apply(cbind(x0, error), 1, cumsum)  # construct the one-dim BM
plot(x, main = "Two-Dimensional Brownian Motion", lty=1)
plot(x, type="l", main="Two-Dimensional Brownian Motion", xlab="1st Dimension", ylab="2nd Dimension")
plot(t(x), type="l", main="Two-Dimensional Brownian Motion", xlab="1st Dimension", ylab="2nd Dimension")
plot(x, type="l", main="Two-Dimensional Brownian Motion", xlab="1st Dimension", ylab="2nd Dimension")
points(x[1,], pch=2)
x
points(x[1,1],x[1,2] pch=2)
points(x[1,1],x[1,2], pch=2)
points(x[end,1],x[end,2], pch=7)
points(x[n,1],x[n,2], pch=7)
n = dim(x)[1]
plot(x, type="l", main="Two-Dimensional Brownian Motion", xlab="1st Dimension", ylab="2nd Dimension")
# Indicate starting and ending points
points(x[1,1],x[1,2], pch=2)
points(x[n,1],x[n,2], pch=7)
legend("topright", c("Start", "End"), pch=c(2,7))
source('~/Documents/Wisconsin/BMI_826/SimBM.R')
x = SimBM(100, 0.5)
names(x)
PlotBM(x)
PlotBM(x)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
getwd()
setwd("/home/derek/Document/Wisconsin/BMI_826")
setwd("/home/derek/Document/Wisconsin/BMI_826/")
setwd("Home/Document/Wisconsin/BMI_826/")
setwd("/Home/Document/Wisconsin/BMI_826/")
setwd("/home/derek/Document/Wisconsin/BMI_826/")
setwd("/home/derek/Documents")
setwd("/home/derek/Documents/Wisconsin/BMI_826")
setwd("/home/derek/Documents/Wisconsin/BMI_826/SimBM/R")
document()
build()
check()
